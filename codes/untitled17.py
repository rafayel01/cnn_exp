# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ebcZ8cbAcnrQKcMLASEFxvrXsQ8RMVPP
"""

# -*- coding: utf-8 -*-
"""Copy of Copy of Diplom__code_my_results.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BNDagJvPC9pjLYWx9fR4WVs3pOy05uHI
"""

# Commented out IPython magic to ensure Python compatibility.
import torch
import torchvision
import numpy as np
import matplotlib.pyplot as plt
import torch.nn as nn
import torch.nn.functional as F
from torchvision.datasets import CIFAR10
from torchvision.transforms import ToTensor
from torchvision.utils import make_grid
from torch.utils.data.dataloader import DataLoader
from torch.utils.data import random_split
# %matplotlib inline
from torchvision import transforms
from torch.utils.data.sampler import SubsetRandomSampler



transform_train = transforms.Compose(
    [transforms.RandomCrop(32, padding=4, padding_mode='reflect'),
     transforms.RandomHorizontalFlip(),
     transforms.ToTensor(),
     transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010),inplace=True)])
transform_test = transforms.Compose([
    transforms.ToTensor(),
     transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010),inplace=True)
])
batch_size = 400

def imshow(img):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


def get_default_device():
    """Pick GPU if available, else CPU"""
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')

def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader():
    """Wrap a dataloader to move data to a device"""
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device

    def __iter__(self):
        """Yield a batch of data after moving it to device"""
        for b in self.dl:
            yield to_device(b, self.device)

    def __len__(self):
        """Number of batches"""
        return len(self.dl)

device = get_default_device()
trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)
valset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_test)
valid_size = 0.2
num_train = len(trainset)
indices = list(range(num_train))
split = int(np.floor(valid_size * num_train))
np.random.seed(42)
np.random.shuffle(indices)
train_idx, valid_idx = indices[split:], indices[:split]
train_sampler = SubsetRandomSampler(train_idx)
valid_sampler = SubsetRandomSampler(valid_idx)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, sampler=train_sampler,
                                          num_workers=2, pin_memory=True)
valloader = torch.utils.data.DataLoader(valset, batch_size=batch_size, sampler=valid_sampler,
                                          num_workers=2, pin_memory=True)

testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2, pin_memory=True)


train_dl = DeviceDataLoader(trainloader, device)
val_dl = DeviceDataLoader(valloader, device)
test_dl = DeviceDataLoader(testloader, device)

def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss

    def validation_step(self, batch):
        images, labels = batch
        out = self(images)                    # Generate predictions
        loss = F.cross_entropy(out, labels)   # Calculate loss
        acc = accuracy(out, labels)           # Calculate accuracy
        return {'val_loss': loss.detach(), 'val_acc': acc}

    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return epoch_loss.item(), epoch_acc.item()

    def epoch_end(self, epoch, result):
        print("Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch + 1, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))

def parameter_count(model):
  return sum(p.numel() for p in model.parameters() if p.requires_grad)

def conv_block(in_channels, out_channels, pool=False):
    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
              nn.BatchNorm2d(out_channels),
              nn.ReLU(inplace=True)]
    if pool: layers.append(nn.MaxPool2d(2))
    return nn.Sequential(*layers)



class ResNet9(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        self.conv1 = conv_block(in_channels, 64)
        self.conv2 = conv_block(64, 128, pool=True)
        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128))

        self.conv3 = conv_block(128, 256, pool=True)
        self.conv4 = conv_block(256, 512, pool=True)
        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))

        self.classifier = nn.Sequential(nn.AvgPool2d(4),
                                        nn.Flatten(),
                                        nn.Linear(512, num_classes),
                                        nn.LogSoftmax(dim=1))

    def forward(self, xb):
        out = self.conv1(xb)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        return out


class my_layer(nn.Module):
    def __init__(self, img_channels) -> None:
        super().__init__()
        filter1 = torch.Tensor([[[0,  1,  0],
                                [0, -2,  0],
                                [0,  1,  0]]])
        filter2 = torch.Tensor([[[0,  0,  0],
                                [1, -2,  1],
                                [0,  0,  0]]])
        filter3 = torch.Tensor([[[0,  0,  0],
                                 [0,  1,  0],
                                 [0,  0,  0]]])
        self.register_buffer("filter1", filter1)
        self.register_buffer("filter2", filter2)
        self.register_buffer("filter3", filter3)
        self.weight1_1 = nn.Parameter(torch.Tensor(3, 3, 1))
        self.weight1_2 = nn.Parameter(torch.Tensor(3, 3, 1))
        self.weight1_3 = nn.Parameter(torch.Tensor(3, 3, 1))
        #self.bias = nn.Parameter(torch.Tensor(1))
        nn.init.xavier_normal_(self.weight1_1)
        nn.init.xavier_normal_(self.weight1_2)
        nn.init.xavier_normal_(self.weight1_3)

        self.bn01 = nn.BatchNorm2d(img_channels)
        self.relu = nn.ReLU(inplace=True)


    def forward(self, x:  torch.Tensor) -> torch.Tensor:
        self.kernel1_1 = torch.einsum("ijk, klm -> ijlm", self.weight1_1, self.filter1)
        self.kernel1_2 = torch.einsum("ijk, klm -> ijlm", self.weight1_2, self.filter2)
        self.kernel1_3 = torch.einsum("ijk, klm -> ijlm", self.weight1_3, self.filter3)
        print(self.weight1_1, self.filter1) #, self.kernel1_2, self.kernel1_3)
        x = F.conv2d(x, weight=self.kernel1_1+self.kernel1_2+self.kernel1_3, padding=1)
        x = self.bn01(x)
        x = self.relu(x)
        return x

class ResNet9_par(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()
        self.mylayer_1 = my_layer(img_channels=in_channels)
        self.conv1 = conv_block(in_channels, 64)
        self.conv2 = conv_block(64, 128, pool=True)
        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128))

        self.conv3 = conv_block(128, 256, pool=True)
        self.conv4 = conv_block(256, 512, pool=True)
        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))

        self.classifier = nn.Sequential(nn.AvgPool2d(4),
                                        nn.Flatten(),
                                        nn.Linear(512, num_classes),
                                        nn.LogSoftmax(dim=1))

    def forward(self, xb):
        x = self.mylayer_1(xb)
        out = self.conv1(x)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        return out


class ResNet9_par_2(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()
        self.mylayer_1 = my_layer(img_channels=in_channels)
        self.mylayer_2 = my_layer(img_channels=in_channels)
        self.conv1 = conv_block(in_channels, 64)
        self.conv2 = conv_block(64, 128, pool=True)
        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128))

        self.conv3 = conv_block(128, 256, pool=True)
        self.conv4 = conv_block(256, 512, pool=True)
        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))

        self.classifier = nn.Sequential(nn.AvgPool2d(4),
                                        nn.Flatten(),
                                        nn.Linear(512, num_classes),
                                        nn.LogSoftmax(dim=1))

    def forward(self, xb):
        x = self.mylayer_1(xb)
        x = self.mylayer_2(x)
        out = self.conv1(x)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        return out



class ResNet9_par_3(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()
        self.mylayer_1 = my_layer(img_channels=in_channels)
        self.mylayer_2 = my_layer(img_channels=in_channels)
        self.mylayer_3 = my_layer(img_channels=in_channels)
        self.conv1 = conv_block(in_channels, 64)
        self.conv2 = conv_block(64, 128, pool=True)
        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128))

        self.conv3 = conv_block(128, 256, pool=True)
        self.conv4 = conv_block(256, 512, pool=True)
        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))

        self.classifier = nn.Sequential(nn.AvgPool2d(4),
                                        nn.Flatten(),
                                        nn.Linear(512, num_classes),
                                        nn.LogSoftmax(dim=1))

    def forward(self, xb):
        x = self.mylayer_1(xb)
        x = self.mylayer_2(x)
        x = self.mylayer_3(x)
        out = self.conv1(x)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        return out


class ResNet9_par_4(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()
        self.mylayer_1 = my_layer(img_channels=in_channels)
        self.mylayer_2 = my_layer(img_channels=in_channels)
        self.mylayer_3 = my_layer(img_channels=in_channels)
        self.mylayer_4 = my_layer(img_channels=in_channels)
        self.conv1 = conv_block(in_channels, 64)
        self.conv2 = conv_block(64, 128, pool=True)
        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128))

        self.conv3 = conv_block(128, 256, pool=True)
        self.conv4 = conv_block(256, 512, pool=True)
        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))

        self.classifier = nn.Sequential(nn.AvgPool2d(4),
                                        nn.Flatten(),
                                        nn.Linear(512, num_classes),
                                        nn.LogSoftmax(dim=1))

    def forward(self, xb):
        x = self.mylayer_1(xb)
        x = self.mylayer_2(x)
        x = self.mylayer_3(x)
        x = self.mylayer_4(x)
        out = self.conv1(x)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        return out


class ResNet9_par_5(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()
        self.mylayer_1 = my_layer(img_channels=in_channels)
        self.mylayer_2 = my_layer(img_channels=in_channels)
        self.mylayer_3 = my_layer(img_channels=in_channels)
        self.mylayer_4 = my_layer(img_channels=in_channels)
        self.mylayer_5 = my_layer(img_channels=in_channels)
        self.conv1 = conv_block(in_channels, 64)
        self.conv2 = conv_block(64, 128, pool=True)
        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128))

        self.conv3 = conv_block(128, 256, pool=True)
        self.conv4 = conv_block(256, 512, pool=True)
        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))

        self.classifier = nn.Sequential(nn.AvgPool2d(4),
                                        nn.Flatten(),
                                        nn.Linear(512, num_classes),
                                        nn.LogSoftmax(dim=1))


    def forward(self, xb):
        x = self.mylayer_1(xb)
        x = self.mylayer_2(x)
        x = self.mylayer_3(x)
        x = self.mylayer_4(x)
        x = self.mylayer_5(x)
        out = self.conv1(x)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        return out



@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, test_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []
    loss_lst = []
    acc_lst = []

    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, steps_per_epoch=len(train_loader))
    best_accuracy = 0.93
    for epoch in range(epochs):
        print(f"EPOCH: {epoch}")
        torch.cuda.empty_cache()
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()
            for name, param in model.named_parameters():
                #print(f"Name: {name}")
                if 'mylayer' in name:
                    print(name, param.grad)
            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        for ind, par in enumerate(model.parameters()):
            if ind == 0:
              print(par)
        # Validation phase
        model.eval()
        val_loss, val_acc = evaluate(model, val_loader)
        loss_lst.append(val_loss)
        acc_lst.append(val_acc)
        result = {'val_loss': val_loss, 'val_acc': val_acc}
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
        #if  history_original[-1]['val_acc'] > best_accuracy:
        #    best_accuracy = history_original[-1]['val_acc']
            #torch.save(model, f'/content/drive/MyDrive/diplom_experiments/best_{model}_original.pth')
            #torch.save(model.state_dict(), f'/content/drive/MyDrive/diplom_experiments/{model}_original_parameters.pth')
    #test_loss, test_acc = evaluate(model, test_loader)
    #with open(f'/home/rafayel.veziryan/cnn_exp/results/cifar10_resnet9/{model._get_name()}_test_results.txt', 'w') as f:
    #    f.write(f'Model: {model._get_name()} \n Test Loss: {test_loss} \n Test Accuracy: {test_acc}')
    return loss_lst, acc_lst

model_original = to_device(ResNet9(3, 10),  device)
model_parabolic_1 = to_device(ResNet9_par(3, 10), device)
model_parabolic_2 = to_device(ResNet9_par_2(3, 10), device)
model_parabolic_3 = to_device(ResNet9_par_3(3, 10), device)
model_parabolic_4 = to_device(ResNet9_par_4(3, 10), device)
model_parabolic_5 = to_device(ResNet9_par_5(3, 10), device)


models = (model_parabolic_1, ) # (model_original, model_parabolic_1, model_parabolic_2, model_parabolic_3, model_parabolic_4, model_parabolic_5)
history_original = {'val_loss': [], 'val_acc': []} #
history_original_loss, history_original_acc = evaluate(model_original, test_dl)
history_original["val_loss"].append(history_original_loss)
history_original["val_acc"].append(history_original_acc)
history_parabolic_1 = {'val_loss': [], 'val_acc': []} #
history_parabolic_1_loss, history_parabolic_1_acc = evaluate(model_parabolic_1, test_dl)
history_parabolic_1["val_loss"].append(history_parabolic_1_loss)
history_parabolic_1["val_acc"].append(history_parabolic_1_acc)
history_parabolic_2 = {'val_loss': [], 'val_acc': []} #
history_parabolic_2_loss, history_parabolic_2_acc = evaluate(model_parabolic_2, test_dl)
history_parabolic_2["val_loss"].append(history_parabolic_2_loss)
history_parabolic_2["val_acc"].append(history_parabolic_2_acc)
history_parabolic_3 = {'val_loss': [], 'val_acc': []} #
history_parabolic_3_loss, history_parabolic_3_acc = evaluate(model_parabolic_3, test_dl)
history_parabolic_3["val_loss"].append(history_parabolic_3_loss)
history_parabolic_3["val_acc"].append(history_parabolic_3_acc)
history_parabolic_4 = {'val_loss': [], 'val_acc': []} #
history_parabolic_4_loss, history_parabolic_4_acc = evaluate(model_parabolic_4, test_dl)
history_parabolic_4["val_loss"].append(history_parabolic_4_loss)
history_parabolic_4["val_acc"].append(history_parabolic_4_acc)
history_parabolic_5 = {'val_loss': [], 'val_acc': []} #
history_parabolic_5_loss, history_parabolic_5_acc = evaluate(model_parabolic_5, test_dl)
history_parabolic_5["val_loss"].append(history_parabolic_5_loss)
history_parabolic_5["val_acc"].append(history_parabolic_5_acc)
# history_original["val_loss"].append(history_original_loss)
# history_original["val_acc"].append(history_original_acc)
# history_parabolic_1 = [evaluate(model_parabolic_1, test_dl)]
# history_parabolic_2 = [evaluate(model_parabolic_2, test_dl)]
# history_parabolic_3 = [evaluate(model_parabolic_3, test_dl)]
# history_parabolic_4 = [evaluate(model_parabolic_4, test_dl)]
# history_parabolic_5 = [evaluate(model_parabolic_5, test_dl)]

histories = [history_parabolic_1, ] # [history_original, history_parabolic_1, history_parabolic_2, history_parabolic_3, history_parabolic_4, history_parabolic_5]
import pickle
#print(histories)

epochs = 100
max_lr = 0.01
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.Adam


for model in models:
    print(parameter_count(model))


for ind, model in enumerate(models):
    model_loss, model_acc = fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, test_dl,
                             grad_clip=grad_clip,
                             weight_decay=weight_decay,
                             opt_func=opt_func)
    histories[ind]['val_loss'].extend(model_loss)
    histories[ind]['val_acc'].extend(model_acc)
    #torch.save(model.state_dict(), f'/home/rafayel.veziryan/cnn_exp/results/cifar10_resnet9/{model._get_name()}_bst.pt')


#with open(f'/home/rafayel.veziryan/cnn_exp/results/cifar10_resnet9/{model._get_name()}_all_list.pkl', 'wb') as fp:
#    pickle.dump(histories, fp)
#    print('History saved successfully to file')



